load("../coppersmithsMethod.sage")
load("../optimalShiftPolys.sage")

print("Tutorial for Automated Coppersmith")
print("")

R.<x,y,z> = PolynomialRing(QQ, order="lex")
f = x*y + 589027211857763577534285004407500599515877701606204166373378*x + 1210227469872595954120304353034891111272800242671483019591678*y + 712856912292730764373550860496219675510804490821800240884045436352648323240616556057658921760694390255205809419649548300
g = y*z + 180903529981528496775978209575327607639654632700732707438594*y + 589027211857763577534285004407500599515877701606204166373374*z + 106557101880247071038513607218438121606755644416752074440223180138737614542165434004098656165965878724132245889781596172
h = x*z + 180903529981528496775978209575327607639654632700732707438590*x + 1210227469872595954120304353034891111272800242671483019591682*z + 218934421380566537752529711732076738457083728873215369882112435160195713717062213345893111966722806427323100105889808396
p = 1255164847533299303722831198034117851714068657650841640180487

i = 1
m = 3*i
M = []
for j_1 in range(i+1):
  for j_2 in range(i+1):
    for j_3 in range(i+1):
      M += ( f^(j_1) * g^(j_2) * h^(j_3) ).monomials()
M = list(set(M))      

F = constructOptimalShiftPolys( [f,g,h], M, p, m )
solutions = coppersmithsMethod( F, p^m, [2^50,2^50,2^50], verbose=True )

print("")
print("Found the following roots:", solutions)